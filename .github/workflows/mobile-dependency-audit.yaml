name: Mobile Dependency Audit

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main
      - develop

jobs:
  ios-dependency-audit:
    runs-on: macos-latest
    name: iOS Dependency Audit
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Install CocoaPods and Audit Tools
      run: |
        gem install cocoapods
        # cocoapods-audit is not available, using basic checks only

    - name: Setup iOS Environment
      run: |
        # Install dependencies first
        npm ci || npm install --no-audit --no-fund
        
        # Build web assets for Capacitor
        npm run build
        
        # Ensure Capacitor iOS files are generated
        npx --yes cap sync ios
        
    - name: Install iOS Dependencies
      run: |
        cd ios/App
        pod install --repo-update

    - name: Check iOS Dependencies for Vulnerabilities
      run: |
        cd ios/App
        echo "üîç Checking iOS dependencies for security vulnerabilities..."
        
        # Basic iOS dependency checks (cocoapods-audit not available)
        echo "Running basic iOS dependency checks..."
        
        # Check for outdated dependencies
        if pod outdated --silent; then
          echo "‚ö†Ô∏è Some iOS dependencies may be outdated. Consider updating."
        else
          echo "‚úÖ iOS dependencies appear to be up to date"
        fi
        
        # Check for known vulnerable dependencies
        if grep -q "GoogleMLKit\|MLKitBarcodeScanning" Podfile; then
          echo "‚ö†Ô∏è MLKit dependencies detected - monitor for security updates"
        fi
        
        # Check for specific vulnerable iOS libraries
        echo "Checking for known vulnerable iOS libraries..."
        VULNERABLE_LIBS=("AFNetworking" "SDWebImage" "Realm" "CocoaLumberjack")
        for lib in "${VULNERABLE_LIBS[@]}"; do
          if grep -q "$lib" Podfile; then
            echo "‚ö†Ô∏è Found potentially vulnerable library: $lib"
          fi
        done
        
        echo "‚úÖ iOS dependency vulnerability check completed"

  android-dependency-audit:
    runs-on: ubuntu-latest
    name: Android Dependency Audit
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Setup Node (for Capacitor CLI)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Node dependencies
      run: |
        # Prefer clean install, but fall back to regular install if lockfile is out of sync
        npm ci || npm install --no-audit --no-fund

    - name: Build web assets
      run: npm run build

    - name: Generate Android project artifacts (Capacitor sync)
      run: npx --yes cap sync android

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        build-root-directory: android

    - name: Make gradlew executable
      working-directory: android
      run: chmod +x gradlew

    - name: Download Gradle Dependencies
      working-directory: android
      run: ./gradlew dependencies --no-daemon

    - name: Generate CycloneDX SBOM (Gradle)
      working-directory: android
      run: ./gradlew --no-daemon cyclonedxBom

    - name: Scan SBOM with Trivy (no API key)
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: sbom
        input: android/build/reports/bom.json
        severity: HIGH,CRITICAL
        exit-code: '1'
        ignore-unfixed: true

    - name: Upload SBOM
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: android-sbom
        path: android/build/reports/bom.json

    - name: Check Android Dependencies for Known Vulnerabilities
      run: |
        cd android
        echo "üîç Checking Android dependencies for known vulnerabilities..."
        
        # Check for vulnerable AndroidX versions
        if grep -q "androidx.appcompat.*1\.[0-5]\." app/build.gradle; then
          echo "‚ö†Ô∏è Outdated AndroidX AppCompat detected"
          exit 1
        fi
        
        # Check for vulnerable support library versions
        if grep -q "com.android.support" app/build.gradle; then
          echo "‚ö†Ô∏è Android Support Library detected - consider migrating to AndroidX"
        fi
        
        # Check for known vulnerable libraries
        VULNERABLE_ANDROID_LIBS=("okhttp" "retrofit" "glide" "picasso")
        for lib in "${VULNERABLE_ANDROID_LIBS[@]}"; do
          if grep -q "$lib" app/build.gradle; then
            echo "‚ö†Ô∏è Found potentially vulnerable Android library: $lib"
          fi
        done
        
        echo "‚úÖ Android dependency vulnerability check completed"

  mobile-security-scan:
    runs-on: ubuntu-latest
    name: Mobile Security Scan
    needs: [ios-dependency-audit, android-dependency-audit]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci

    - name: Run Mobile Security Scan
      run: |
        # Additional mobile-specific security checks
        echo "üîç Running mobile security scan..."
        
        # Check for known vulnerable Capacitor plugins
        npm audit --audit-level=moderate || {
          echo "‚ö†Ô∏è NPM audit found vulnerabilities in Capacitor dependencies"
          exit 1
        }
        
        # Check for outdated mobile dependencies
        npx npm-check-updates --target minor --reject "@capacitor/*,@aparajita/*,@evva/*,capacitor-*" || {
          echo "‚ÑπÔ∏è Some mobile dependencies may have updates available"
        }
        
        # Check for sensitive files in mobile directories
        echo "üîç Checking for sensitive files in mobile directories..."
        if find . -name "google-services.json" -o -name "GoogleService-Info.plist" -o -name "*.keystore" -o -name "*.jks" | grep -q .; then
          echo "‚ö†Ô∏è Found sensitive files in repository"
          find . -name "google-services.json" -o -name "GoogleService-Info.plist" -o -name "*.keystore" -o -name "*.jks"
        else
          echo "‚úÖ No sensitive files found"
        fi
        
        # Check Capacitor configuration for security issues
        if [ -f "capacitor.config.ts" ]; then
          echo "üîç Checking Capacitor configuration for security issues..."
          if grep -q "allowNavigation" capacitor.config.ts; then
            echo "‚ö†Ô∏è Found allowNavigation in Capacitor config - review for security implications"
          fi
          if grep -q "server" capacitor.config.ts; then
            echo "‚ö†Ô∏è Found server configuration in Capacitor config - review for security implications"
          fi
        fi
        
        echo "‚úÖ Mobile security scan completed successfully" 